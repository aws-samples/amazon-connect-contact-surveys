AWSTemplateFormatVersion: "2010-09-09"
Description: "Post-contact Surveys for Amazon Connect deployment (SO9273)"

Mappings:
    CFTParameters:
        S3Bucket:
            Name: aws-contact-center-blog
        S3Prefix:
            Value: amazon-connect-post-call-surveys

Parameters:
    AmazonConnectInstanceARN:
        Type: String
        Description: The Amazon Connect instance ARN
    AmazonConnectInstanceName:
        Type: String
        Description: The Amazon Connect instance name
    ContactFlowIdForTasks:
        Type: String
        Description: The contact flow you want generated tasks to be directed to
    AdminEmailAddress:
        Type: String
        Description: "The email address for the initial survey administrator of the solution"

Resources:
    #####################################################
    # Artifact S3 Bucket
    #####################################################
    BlogArtifacts:
        Type: AWS::S3::Bucket
        DeletionPolicy: Delete
        UpdateReplacePolicy: Retain
        Properties:
            OwnershipControls:
                Rules:
                    - ObjectOwnership: ObjectWriter
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                    - ServerSideEncryptionByDefault:
                          SSEAlgorithm: AES256
    #####################################################
    # Artifact Lambda IAM Role
    #####################################################
    CopyArtifactsLambdaIamRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                      Action:
                          - "sts:AssumeRole"
            Path: /
            Policies:
                - PolicyName: root
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - "s3:PutObject"
                            Resource: !Sub "arn:aws:s3:::${BlogArtifacts}/*"
                          - Effect: Allow
                            Action:
                                - "s3:GetObject"
                                - "s3:GetObjectVersion"
                            Resource:
                                - !Sub
                                  - arn:aws:s3:::${S3BucketName}/*
                                  - S3BucketName: !FindInMap [CFTParameters, "S3Bucket", "Name"]
                          - Effect: Allow
                            Action:
                                - "s3:ListBucket"
                                - "s3:ListBucketVersions"
                            Resource:
                                - !Sub
                                  - arn:aws:s3:::${S3BucketName}/*
                                  - S3BucketName: !FindInMap [CFTParameters, "S3Bucket", "Name"]
                                - !Sub "arn:aws:s3:::${BlogArtifacts}/*"
                          - Effect: Allow
                            Action:
                                - "s3:DeleteObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${BlogArtifacts}/*"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    #####################################################
    # Custom resource trigger to copy artifacts
    #####################################################
    CopyCfnStacksLambdaTrigger:
        Type: "Custom::CopyCfnResources"
        Properties:
            ServiceToken: !GetAtt CustomResourceCopySourceFunction.Arn
            BlogArtifacts: !Ref BlogArtifacts
            SourceBucket: !FindInMap [CFTParameters, "S3Bucket", "Name"]
            SourcePrefix: !FindInMap [CFTParameters, "S3Prefix", "Value"]
        DependsOn: CustomResourceCopySourceFunction

    #####################################################
    # Copy Layer Helper Function
    #####################################################
    CustomResourceCopySourceFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Role: !GetAtt CopyArtifactsLambdaIamRole.Arn
            Handler: "index.handler"
            Runtime: "nodejs22.x"
            Code:
                ZipFile: |
                    // Copyright 2022 Amazon.com and its affiliates; all rights reserved. 
                    // This file is Amazon Web Services Content and may not be duplicated or distributed without permission.

                    const { S3Client, CopyObjectCommand, DeleteObjectsCommand } = require('@aws-sdk/client-s3');
                    const response = require('cfn-response');

                    // Initialize S3 client
                    const s3Client = new S3Client();

                    // Array of source objects to be copied or deleted
                    const sourceObjectArray = [
                        'frontend/static/css/main.09784eec.css',
                        'frontend/static/css/main.09784eec.css.map',
                        'frontend/static/js/787.91799eaa.chunk.js',
                        'frontend/static/js/787.91799eaa.chunk.js.map',
                        'frontend/static/js/main.3336631e.js.LICENSE.txt',
                        'frontend/static/js/main.3336631e.js.map',
                        'frontend/static/js/main.3336631e.js',
                        'frontend/static/media/ico_connect.c4b4b06e46441b63ec178326f8a9e34e.svg',
                        'frontend/asset-manifest.json',
                        'frontend/config.js',
                        'frontend/favicon.ico',
                        'frontend/favicon.png',
                        'frontend/index.html',
                        'frontend/robots.txt',
                        'uuid-layer.zip'
                    ];

                    exports.handler = async (event, context) => {
                        // Extract properties from the event
                        const sourceBucket = event.ResourceProperties.SourceBucket;
                        const sourcePrefix = event.ResourceProperties.SourcePrefix;
                        console.log('Event:', event);

                        // Initialize result object
                        const result = {
                            responseStatus: 'FAILED',
                            responseData: { Data: 'Never updated' }
                        };

                        try {
                            console.log(`Received event with type ${event.RequestType}`);

                            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                                // Handle Create or Update operations
                                await Promise.all(
                                    sourceObjectArray.map(async (object) => {
                                        console.log('Copying:', object, `${sourceBucket}/${sourcePrefix}/${object}`);
                                        
                                        const copyCommand = new CopyObjectCommand({
                                            Bucket: event.ResourceProperties.BlogArtifacts,
                                            Key: object,
                                            CopySource: `${sourceBucket}/${sourcePrefix}/${object}`
                                        });

                                        const s3Result = await s3Client.send(copyCommand);
                                        console.log('Finished uploading File with result:', JSON.stringify(s3Result, null, 4));
                                    })
                                );

                                result.responseStatus = 'SUCCESS';
                                result.responseData.Data = 'Successfully uploaded files';

                            } else if (event.RequestType === 'Delete') {
                                // Handle Delete operations
                                await Promise.all(
                                    sourceObjectArray.map(async (object) => {
                                        const deleteCommand = new DeleteObjectsCommand({
                                            Bucket: event.ResourceProperties.BlogArtifacts,
                                            Delete: { 
                                                Objects: [{ Key: object }]
                                            }
                                        });

                                        const s3Result = await s3Client.send(deleteCommand);
                                        console.log('Finished deleting files with result:', JSON.stringify(s3Result, null, 4));
                                    })
                                );

                                result.responseStatus = 'SUCCESS';
                                result.responseData.Data = 'Successfully deleted files';
                            }

                        } catch (error) {
                            console.log('Error:', JSON.stringify(error, null, 4));
                            result.responseStatus = 'FAILED';
                            result.responseData.Data = 'Failed to process event';
                        } finally {
                            return await sendResponse(event, context, result.responseStatus, result.responseData, 'mainstack');
                        }
                    };

                    /**
                    * Wraps the response.send in a Promise for better async handling
                    * @param {Object} event - CloudFormation custom resource event
                    * @param {Object} context - Lambda context
                    * @param {string} responseStatus - SUCCESS or FAILED
                    * @param {Object} responseData - Response data to send back
                    * @param {string} physicalResourceId - Physical resource ID
                    * @returns {Promise} Promise that resolves when response is sent
                    */
                    function sendResponse(event, context, responseStatus, responseData, physicalResourceId) {
                        return new Promise(() => 
                            response.send(event, context, responseStatus, responseData, physicalResourceId)
                        );
                    }

            Timeout: 50

    GenericLexBotRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - lexv2.amazonaws.com
                      Action:
                          - "sts:AssumeRole"
            Path: "/"
            Policies:
                - PolicyName: LexRuntimeRolePolicy
                  PolicyDocument:
                      Version: 2012-10-17
                      Statement:
                          - Effect: Allow
                            Action:
                                - "polly:SynthesizeSpeech"
                            Resource: "*"

    GenericLexBot:
        DependsOn: GenericLexBotRole
        Type: AWS::Lex::Bot
        Properties:
            Name: !Sub ${AWS::StackName}-contact-survey-bot
            RoleArn: !GetAtt GenericLexBotRole.Arn
            DataPrivacy:
                ChildDirected: false
            IdleSessionTTLInSeconds: 300
            AutoBuildBotLocales: false
            BotLocales:
                - LocaleId: "en_US"
                  NluConfidenceThreshold: 1
                  VoiceSettings:
                      VoiceId: "Ivy"
                  Intents:
                      - Name: "0"
                        SampleUtterances:
                            - Utterance: "0"
                      - Name: "1"
                        SampleUtterances:
                            - Utterance: "1"
                      - Name: "2"
                        SampleUtterances:
                            - Utterance: "2"
                      - Name: "3"
                        SampleUtterances:
                            - Utterance: "3"
                      - Name: "4"
                        SampleUtterances:
                            - Utterance: "4"
                      - Name: "5"
                        SampleUtterances:
                            - Utterance: "5"
                      - Name: "6"
                        SampleUtterances:
                            - Utterance: "6"
                      - Name: "7"
                        SampleUtterances:
                            - Utterance: "7"
                      - Name: "8"
                        SampleUtterances:
                            - Utterance: "8"
                      - Name: "9"
                        SampleUtterances:
                            - Utterance: "9"
                      - Name: "FallbackIntent"
                        Description: "Default intent when no other intent matches"
                        ParentIntentSignature: "AMAZON.FallbackIntent"

    GenericLexBotVersion:
        Type: AWS::Lex::BotVersion
        DependsOn: GenericLexBot
        Properties:
            BotId: !Ref GenericLexBot
            BotVersionLocaleSpecification:
                - LocaleId: en_US
                  BotVersionLocaleDetails:
                      SourceBotVersion: DRAFT

    GenericLexBotAlias:
        Type: AWS::Lex::BotAlias
        DependsOn: GenericLexBotVersion
        Properties:
            BotId: !Ref GenericLexBot
            BotAliasName: "template"
            BotVersion: !GetAtt GenericLexBotVersion.BotVersion
            SentimentAnalysisSettings:
                DetectSentiment: false

    UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: !Sub ${AWS::StackName}-user-pool
            UsernameConfiguration:
                CaseSensitive: false
            AutoVerifiedAttributes:
                - email
            Schema:
                - Name: email
                  AttributeDataType: String
                  Mutable: false
                  Required: true
            AliasAttributes:
                - email

    UserPoolUser:
        Type: AWS::Cognito::UserPoolUser
        Properties:
            DesiredDeliveryMediums:
                - EMAIL
            ForceAliasCreation: true
            Username: admin
            UserPoolId: !Ref UserPool
            UserAttributes:
                - Name: email
                  Value: !Ref AdminEmailAddress

    UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: "post-contact-survey-frontend"
            ExplicitAuthFlows:
                - ALLOW_CUSTOM_AUTH
                - ALLOW_USER_SRP_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
            UserPoolId: !Ref UserPool

    FrontEndS3BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref FrontEndS3Bucket
            PolicyDocument:
                Version: "2008-10-17"
                Id: "PolicyForCloudFrontPrivateContent"
                Statement:
                    - Action:
                          - "s3:GetObject"
                      Effect: Allow
                      Resource: !Join ["", [!GetAtt FrontEndS3Bucket.Arn, "/*"]]
                      Principal:
                          CanonicalUser: !GetAtt [CDNOriginIdentity, S3CanonicalUserId]

    FrontEndS3Bucket:
        Type: AWS::S3::Bucket
        Properties:
            OwnershipControls:
                Rules:
                    - ObjectOwnership: ObjectWriter

    CDNOriginIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub "Cloudfront Origin identity"

    CustomCachePolicy:
        Type: AWS::CloudFront::CachePolicy
        Properties:
            CachePolicyConfig:
                Comment: String
                DefaultTTL: 3600
                MaxTTL: 86400
                MinTTL: 500
                Name: !Sub "CustomCachePolicy_${AWS::StackName}"
                ParametersInCacheKeyAndForwardedToOrigin:
                    CookiesConfig:
                        CookieBehavior: none
                    EnableAcceptEncodingBrotli: true
                    EnableAcceptEncodingGzip: true
                    HeadersConfig:
                        HeaderBehavior: whitelist
                        Headers:
                            - Authorization
                    QueryStringsConfig:
                        QueryStringBehavior: none

    CustomOriginRequestPolicy:
        Type: AWS::CloudFront::OriginRequestPolicy
        Properties:
            OriginRequestPolicyConfig:
                Name: !Sub "CustomOriginRequestPolicy_${AWS::StackName}"
                CookiesConfig:
                    CookieBehavior: all
                HeadersConfig:
                    HeaderBehavior: none
                QueryStringsConfig:
                    QueryStringBehavior: all

    CloudFrontDistribution:
        Type: "AWS::CloudFront::Distribution"
        Properties:
            DistributionConfig:
                CustomErrorResponses:
                    - ErrorCode: 404
                      ResponseCode: 200
                      ResponsePagePath: "/index.html"
                    - ErrorCode: 403
                      ResponseCode: 200
                      ResponsePagePath: "/index.html"
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                        - OPTIONS
                    ForwardedValues:
                        Cookies:
                            Forward: none
                        QueryString: false
                    TargetOriginId: !Sub "S3-origin-${FrontEndS3Bucket}"
                    ViewerProtocolPolicy: redirect-to-https
                DefaultRootObject: index.html
                Enabled: True
                HttpVersion: http2
                Origins:
                    - DomainName: !GetAtt FrontEndS3Bucket.RegionalDomainName
                      Id: !Sub "S3-origin-${FrontEndS3Bucket}"
                      S3OriginConfig:
                          OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CDNOriginIdentity}"
                    - DomainName: !Sub "${SurveysApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
                      Id: !Sub "API-origin-${SurveysApiGateway}"
                      CustomOriginConfig:
                          OriginSSLProtocols:
                              - "TLSv1.2"
                          OriginProtocolPolicy: https-only
                CacheBehaviors:
                    - TargetOriginId: !Sub "API-origin-${SurveysApiGateway}"
                      CachePolicyId: !Ref CustomCachePolicy
                      Compress: true
                      PathPattern: "dev/*"
                      ViewerProtocolPolicy: "redirect-to-https"
                      OriginRequestPolicyId: !Ref CustomOriginRequestPolicy
                      AllowedMethods:
                          - HEAD
                          - DELETE
                          - POST
                          - GET
                          - OPTIONS
                          - PUT
                          - PATCH
                PriceClass: PriceClass_All

    LambdaUuidLayer:
        Type: AWS::Lambda::LayerVersion
        DependsOn: CopyCfnStacksLambdaTrigger
        Properties:
            CompatibleArchitectures:
                - x86_64
            CompatibleRuntimes:
                - nodejs22.x
            Content:
                S3Bucket: !Ref BlogArtifacts
                S3Key: "uuid-layer.zip"
            LayerName: !Sub ${AWS::StackName}-uuid-layer

    LambdaWriteSurveysResults:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "Called by Amazon Connect contact flows to write results of a completed survey"
            Handler: index.handler
            Runtime: nodejs22.x
            Role: !GetAtt LambdaWriteSurveyResultsRole.Arn
            FunctionName: !Sub ${AWS::StackName}-surveys-write-results
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    // Import AWS SDK v3 DynamoDB clients
                    const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
                    const { DynamoDBDocumentClient, PutCommand } = require('@aws-sdk/lib-dynamodb');

                    // Initialize DynamoDB clients
                    const client = new DynamoDBClient({});
                    // Create document client with default marshalling options
                    const docClient = DynamoDBDocumentClient.from(client);

                    /**
                    * Lambda handler to store survey results in DynamoDB
                    * Processes survey responses from Amazon Connect contact flow
                    * 
                    * @param {Object} event - Event containing survey responses and contact details
                    * @returns {Object} Response indicating success/failure of the operation
                    */
                    exports.handler = async (event) => {
                        // Initialize object to store survey results
                        const surveyResults = {};
                        // Get all attributes from the contact data
                        const data = event.Details.ContactData.Attributes;
                        
                        // Extract survey-related attributes from contact data
                        // Only process attributes that start with "survey_result_"
                        Object.keys(data).forEach(element => {
                            if (element.startsWith("survey_result_")) {
                                surveyResults[element] = data[element];
                            }
                        });
                        
                        // Prepare DynamoDB item for storage
                        const params = {
                            TableName: process.env.TABLE,
                            Item: {
                                // Store contact ID as primary key
                                contactId: event.Details.ContactData.ContactId,
                                // Store survey ID for reference
                                surveyId: event.Details.ContactData.Attributes.surveyId,
                                // Spread survey results into the item
                                ...surveyResults,
                                // Add Unix timestamp for when the results were stored
                                timestamp: Math.floor(Date.now() / 1000)
                            }
                        };
                        
                        try {
                            // Write survey results to DynamoDB
                            const command = new PutCommand(params);
                            await docClient.send(command);
                        } catch (err) {
                            // Log any errors that occur during write operation
                            console.log(err);
                        }

                        // Return success response
                        const response = {
                            statusCode: 200,
                            body: JSON.stringify('OK'),
                        };
                        return response;
                    };
            Environment:
                Variables:
                    TABLE: !Ref SurveysResultsDDBTable

    LambdaSurveyApi:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "The backend for the API powering the Amazon Connect Post Call Surveys Manager"
            Handler: index.handler
            Runtime: nodejs22.x
            Role: !GetAtt LambdaSurveysApiRole.Arn
            FunctionName: !Sub ${AWS::StackName}-surveys-api
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    // Import AWS SDK v3 DynamoDB clients
                    // DynamoDBClient is the low-level client
                    const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
                    // DynamoDBDocumentClient provides a higher-level abstraction for working with data
                    const { 
                        DynamoDBDocumentClient, 
                        ScanCommand, 
                        PutCommand, 
                        DeleteCommand 
                    } = require('@aws-sdk/lib-dynamodb');
                    // UUID v4 for generating unique identifiers
                    const { v4: uuid } = require('uuid');

                    // Initialize DynamoDB clients
                    const client = new DynamoDBClient({});
                    // Create document client with default marshalling options
                    const docClient = DynamoDBDocumentClient.from(client);

                    // Define valid operations for the API
                    const OPERATIONS = ['create', 'update', 'list', 'delete', 'results'];

                    /**
                    * Scans an entire DynamoDB table and returns all items
                    * Handles pagination automatically using LastEvaluatedKey
                    * @param {string} tableName - The name of the DynamoDB table to scan
                    * @returns {Array} Array of items from the table
                    */
                    const scanTable = async (tableName) => {
                        const params = {
                            TableName: tableName,
                        };

                        const scanResults = [];
                        let lastEvaluatedKey;
                        
                        do {
                            const command = new ScanCommand(params);
                            const response = await docClient.send(command);
                            lastEvaluatedKey = response.LastEvaluatedKey;
                            scanResults.push(...(response.Items || []));
                            params.ExclusiveStartKey = lastEvaluatedKey;
                        } while (lastEvaluatedKey);

                        return scanResults;
                    };

                    /**
                    * Lambda handler function - processes API requests for survey operations
                    * @param {Object} event - AWS Lambda event object
                    * @returns {Object} Response object with status code and body
                    */
                    exports.handler = async (event) => {
                        // Initialize response object with CORS headers
                        const response = {
                            "headers": {
                                "Content-Type": "application/json",
                                "Access-Control-Allow-Origin": "*",
                            }
                        };
                        
                        let operation = undefined;

                        // Validate incoming request
                        if (!validateRequest()) {
                            return response;
                        }

                        let body = {};

                        // Process request based on operation type
                        switch (operation) {
                            case 'list':
                                // Retrieve all surveys from the configuration table
                                let data = await listSurveys();

                                if (data) {
                                    response.statusCode = 200;
                                    body.success = "true";
                                    body.data = data;
                                } else {
                                    response.statusCode = 500;
                                    body.success = false;
                                    body.message = "Something went terribly wrong.";
                                }

                                response.body = JSON.stringify(body);
                                break;

                            case 'create':
                                // Create or update a survey configuration
                                let surveyData = JSON.parse(event.body).data;

                                if (!surveyData) {
                                    response.statusCode = 400;
                                    body.success = false;
                                    body.message = "Unsupported operation.";
                                    response.body = JSON.stringify(body);
                                } else {
                                    // Transform questions array into object with numbered keys
                                    let questions = {};
                                    surveyData.questions.forEach((question, index) => {
                                        questions[`question_${index + 1}`] = question;
                                    });

                                    // Transform flags array into object with numbered keys
                                    let flags = {};
                                    surveyData.flags.forEach((flag, index) => {
                                        flags[`flag_question_${index + 1}`] = flag;
                                    });
                                    
                                    // Generate new UUID if surveyId not provided
                                    const surveyId = surveyData.surveyId || uuid();

                                    // Prepare and execute DynamoDB put operation
                                    const putCommand = new PutCommand({
                                        TableName: process.env.TABLE_SURVEYS_CONFIG,
                                        Item: {
                                            surveyId,
                                            surveyName: surveyData.surveyName,
                                            min: surveyData.min,
                                            max: surveyData.max,
                                            introPrompt: surveyData.introPrompt,
                                            outroPrompt: surveyData.outroPrompt,
                                            ...questions,
                                            ...flags
                                        }
                                    });

                                    await docClient.send(putCommand);
                                    
                                    response.statusCode = 200;
                                    body.success = true;
                                    body.data = surveyId;
                                    response.body = JSON.stringify(body);
                                }
                                break;

                            case 'delete':
                                // Delete a survey configuration
                                const surveyIdToDelete = JSON.parse(event.body).data.surveyId;
                                
                                const deleteCommand = new DeleteCommand({
                                    TableName: process.env.TABLE_SURVEYS_CONFIG,
                                    Key: {
                                        surveyId: surveyIdToDelete
                                    }
                                });
                                
                                await docClient.send(deleteCommand);
                                
                                response.statusCode = 200;
                                body.success = true;
                                response.body = JSON.stringify(body);
                                break;
                                
                            case 'results': 
                                // Retrieve survey results for a specific survey
                                const scanCommand = new ScanCommand({
                                    TableName: process.env.TABLE_SURVEYS_RESULTS,
                                    FilterExpression: "surveyId = :id",
                                    ExpressionAttributeValues: {
                                        ":id": JSON.parse(event.body).data.surveyId
                                    }
                                });
                                
                                const results = await getResults(scanCommand);
                                response.statusCode = 200;
                                body.success = true;
                                body.data = results;
                                response.body = JSON.stringify(body);
                                break;

                            default:
                                response.statusCode = 400;
                                body.success = false;
                                body.message = "Unsupported operation.";
                                response.body = JSON.stringify(body);
                                break;
                        }

                        return response;
                        
                        /**
                        * Retrieves all results for a specific survey
                        * Handles pagination for large result sets
                        * @param {ScanCommand} scanCommand - Prepared scan command for DynamoDB
                        * @returns {Array} Array of survey results
                        */
                        async function getResults(scanCommand) {
                            const scanResults = [];
                            let lastEvaluatedKey;
                            
                            do {
                                const response = await docClient.send(scanCommand);
                                lastEvaluatedKey = response.LastEvaluatedKey;
                                scanResults.push(...(response.Items || []));
                                if (lastEvaluatedKey) {
                                    scanCommand.input.ExclusiveStartKey = lastEvaluatedKey;
                                }
                            } while (lastEvaluatedKey);

                            return scanResults;
                        }

                        /**
                        * Retrieves all survey configurations
                        * @returns {Array|undefined} Array of survey configurations or undefined on error
                        */
                        async function listSurveys() {
                            try {
                                return await scanTable(process.env.TABLE_SURVEYS_CONFIG);
                            } catch (e) {
                                console.log(e);
                                return undefined;
                            }
                        }

                        /**
                        * Validates the incoming request
                        * Checks for valid JSON body and operation type
                        * @returns {boolean} True if request is valid, false otherwise
                        */
                        function validateRequest() {
                            if (event.httpMethod === 'POST') {
                                try {
                                    var body = JSON.parse(event.body);
                                } catch (e) {
                                    console.log(e);
                                    response.statusCode = 400;
                                    response.body = "Body is not valid JSON";
                                    return false;
                                }

                                if (!body.operation) {
                                    response.statusCode = 400;
                                    response.body = "No operation specified";
                                    return false;
                                }

                                if (!OPERATIONS.includes(body.operation)) {
                                    response.statusCode = 400;
                                    response.body = "Unsupported operation";
                                    return false;
                                }

                                operation = body.operation;
                            }

                            return true;
                        }
                    };
            Environment:
                Variables:
                    TABLE_SURVEYS_CONFIG: !Ref SurveysConfigDDBTable
                    TABLE_SURVEYS_RESULTS: !Ref SurveysResultsDDBTable

    LambdaGetSurveyConfig:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "Called by Amazon Connect contact flows to retrieve a survey configuration"
            Handler: index.handler
            Runtime: nodejs22.x
            Role: !GetAtt LambdaGetSurveyConfigRole.Arn
            FunctionName: !Sub ${AWS::StackName}-surveys-get-survey-config
            Timeout: 12
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    // Import AWS SDK v3 DynamoDB clients
                    const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
                    const { DynamoDBDocumentClient, GetCommand } = require('@aws-sdk/lib-dynamodb');

                    // Initialize the DynamoDB client
                    const client = new DynamoDBClient({});
                    // Create a document client with marshalling enabled
                    const docClient = DynamoDBDocumentClient.from(client);

                    /**
                    * Lambda handler to retrieve survey configuration from DynamoDB
                    * Used by Amazon Connect to fetch survey details during contact flows
                    * 
                    * @param {Object} event - Lambda event containing survey parameters
                    * @returns {Object} Survey configuration including questions and metadata
                    */
                    exports.handler = async (event) => {
                        // Initialize response object
                        const response = {};

                        // Prepare DynamoDB query parameters
                        const params = {
                            TableName: process.env.TABLE,
                            Key: {
                                'surveyId': event.Details.Parameters.surveyId
                            }
                        };
                        
                        try {
                            // Fetch survey configuration from DynamoDB
                            const command = new GetCommand(params);
                            const result = await docClient.send(command);
                            
                            response.statusCode = 200;
                            
                            if (result.Item) {
                                response.message = 'OK';
                                
                                // Count the number of questions in the survey
                                let questionCount = 0;
                                
                                // Process each field in the DynamoDB item
                                Object.keys(result.Item).forEach(key => {
                                    // Copy the item value to the response
                                    response[key] = result.Item[key];
                                    
                                    // Count fields that start with 'question' to determine survey size
                                    if (key.startsWith('question')) {
                                        questionCount++;
                                    }
                                });
                                
                                // Add the total number of questions to the response
                                response.surveySize = questionCount;
                            } else {
                                // If no survey found, return appropriate message
                                response.message = `Couldn't find configuration for survey with id [${event.Details.Parameters.surveyId}]`;
                            }
                            
                        } catch (err) {
                            // Log any errors that occur during execution
                            console.log(err);
                        }
                        
                        return response;
                    };
            Environment:
                Variables:
                    TABLE: !Ref SurveysConfigDDBTable

    LambdaProcessSurveyFlagsConfig:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "Called by Amazon Connect contact flows to determine if tasks should be sent to alert on survey results"
            Handler: index.handler
            Runtime: nodejs22.x
            Role: !GetAtt LambdaProcessSurveysFlagsRole.Arn
            FunctionName: !Sub ${AWS::StackName}-process-survey-flags
            Timeout: 12
            Layers:
                - !Ref LambdaUuidLayer
            Environment:
                Variables:
                    CONTACT_FLOW_ID: !Ref ContactFlowIdForTasks
                    INSTANCE_NAME: !Ref AmazonConnectInstanceName
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    // Import AWS SDK v3 Connect client
                    const { ConnectClient, StartTaskContactCommand } = require("@aws-sdk/client-connect");
                    const { v4: uuid } = require("uuid");

                    // Initialize the Connect client
                    const connect = new ConnectClient({});

                    /**
                    * Helper method to split a string from the right
                    * Used for parsing instance ARN
                    * @param {string} sep - Separator to split on
                    * @param {number} maxsplit - Maximum number of splits
                    * @returns {Array} Array of split string parts
                    */
                    String.prototype.rsplit = function (sep, maxsplit) {
                        var split = this.split(sep);
                        return maxsplit ? [split.slice(0, -maxsplit).join(sep)].concat(split.slice(-maxsplit)) : split;
                    };

                    /**
                    * Lambda handler to process survey flags and create tasks for flagged responses
                    * @param {Object} event - Event containing survey response details
                    * @returns {Object} Response with status code
                    */
                    exports.handler = async (event) => {
                        // Object to store questions that were flagged
                        let flagged = {};
                        
                        // Get all survey result keys from contact attributes
                        let surveyKeys = Object.keys(event.Details.ContactData.Attributes)
                            .filter((o) => o.startsWith("survey_result_"));
                        surveyKeys.sort();

                        // Process each survey question to check for flags
                        surveyKeys.forEach((key, index) => {
                            console.log(`Processing ${key}`);
                            
                            // Check if a flag threshold exists for this question
                            if (
                                event.Details.Parameters[`flag_question_${index + 1}`] &&
                                event.Details.Parameters[`flag_question_${index + 1}`] != ""
                            ) {
                                console.log(
                                    `Flag exists for ${key} with threshold ${event.Details.Parameters[`flag_question_${index + 1}`]}`
                                );
                                
                                // Compare response value against flag threshold
                                if (
                                    parseInt(event.Details.ContactData.Attributes[key]) <=
                                    parseInt(event.Details.Parameters[`flag_question_${index + 1}`])
                                ) {
                                    flagged[key] = event.Details.Parameters[`flag_question_${index + 1}`];
                                }
                            }
                        });

                        // If any responses were flagged, create a task
                        if (Object.keys(flagged).length > 0) {
                            // Extract instance ID from the ARN
                            let instanceId = event["Details"]["ContactData"]["InstanceARN"].rsplit("/", 1)[1];
                            let description = "";

                            // Build description including all flagged questions
                            Object.keys(flagged).forEach((key) => {
                                description += `Question ${key.substr(key.length - 1)}: ${
                                    event["Details"]["ContactData"]["Attributes"][key]
                                }\n`;
                            });

                            // Prepare parameters for creating the task
                            const params = {
                                ContactFlowId: process.env.CONTACT_FLOW_ID,
                                InstanceId: instanceId,
                                Name: "Flagged Post Call Survey",
                                Attributes: {
                                    surveyId: event["Details"]["ContactData"]["Attributes"]["surveyId"],
                                    contactId: event["Details"]["ContactData"]["ContactId"],
                                },
                                ClientToken: uuid(),
                                Description: description,
                                References: {
                                    CTR: {
                                        Type: "URL",
                                        Value: `https://${process.env.INSTANCE_NAME}.my.connect.aws/contact-trace-records/details/${event["Details"]["ContactData"]["ContactId"]}`,
                                    },
                                },
                            };

                            try {
                                // Create task in Connect using SDK v3
                                const command = new StartTaskContactCommand(params);
                                await connect.send(command);
                            } catch (err) {
                                console.log(err);
                            }
                        }

                        // Return success response
                        const response = {
                            statusCode: 200,
                            body: JSON.stringify("OK"),
                        };
                        return response;
                    };

    LambdaSurveyUtils:
        Type: AWS::Lambda::Function
        DependsOn:
            - LambdaUuidLayer
        Properties:
            Description: "A set of utilities for the solution to work"
            Handler: index.handler
            Runtime: nodejs22.x
            Role: !GetAtt LambdaSurveysUtilsRole.Arn
            FunctionName: !Sub ${AWS::StackName}-utils
            Timeout: 12
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    /**
                    * Lambda handler for survey utility functions
                    * Supports operations for managing survey flow and input validation
                    * 
                    * @param {Object} event - Event from Amazon Connect containing operation and parameters
                    * @returns {Object} Response object with operation-specific data
                    */
                    exports.handler = async (event) => {
                        // Initialize response with all parameters from the event
                        const response = {
                            ...event.Details.Parameters
                        };
                        
                        const operation = event.Details.Parameters.operation;
                        
                        // If no operation specified, return early with success
                        if (!operation) {
                            response.success = true;
                            response.message = "No operation in input. Nothing to do.";
                            return response;
                        }
                        
                        // Process different operations
                        switch (operation) {
                            case "getNextSurveyQuestion":
                                // Get next question in the survey sequence
                                const data = getNextSurveyQuestion();
                                response.nextQuestion = data.nextQuestion;
                                response.newCounter = data.newCounter;
                                response.currentQuestionIndex = data.currentQuestionIndex;
                                break;
                                
                            case "validateInput":
                                // Validate user input against min/max bounds
                                response.validInput = `${validateInput()}`;
                                response.message = `Your answer is not between ${event.Details.Parameters.min} and ${event.Details.Parameters.max}.`;
                                response.nextQuestion = event.Details.Parameters[`question_${event.Details.ContactData.Attributes.loopCounter}`];
                                break;
                                
                            default:
                                // Handle unsupported operations
                                response.success = false;
                                response.message = "Unsupported operation.";
                        }

                        return response;
                        
                        /**
                        * Validates if the user input falls within the specified min/max bounds
                        * @returns {boolean} True if input is valid, false otherwise
                        */
                        function validateInput() {
                            let min = event.Details.Parameters.min;
                            let max = event.Details.Parameters.max;
                            
                            return parseInt(min) <= parseInt(event.Details.Parameters.input) && 
                                parseInt(max) >= parseInt(event.Details.Parameters.input);
                        }
                        
                        /**
                        * Gets the next survey question and updates the question counter
                        * @returns {Object} Object containing next question details and updated counter
                        */
                        function getNextSurveyQuestion() {
                            let res = {
                                currentQuestionIndex: event.Details.ContactData.Attributes.loopCounter,
                                nextQuestion: event.Details.Parameters[`question_${event.Details.ContactData.Attributes.loopCounter}`],
                                newCounter: parseInt(event.Details.ContactData.Attributes.loopCounter) + 1
                            };
                            
                            return res;
                        }
                    };

    CognitoAuthorizer:
        Type: AWS::ApiGateway::Authorizer
        Properties:
            IdentitySource: method.request.header.Authorization
            Name: CognitoAuthorizer
            ProviderARNs:
                - !GetAtt UserPool.Arn
            RestApiId: !Ref SurveysApiGateway
            Type: COGNITO_USER_POOLS

    ApiGatewayLoggingRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: apigateway.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

    ApiGatewayLoggingRoleSetup:
        Type: AWS::ApiGateway::Account
        DependsOn:
            - SurveysApiGateway
            - ApiGatewayLoggingRole
        Properties:
            CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

    SurveysApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: !Sub ${AWS::StackName}-api-cf

    SurveysApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn:
            - ApiSurveysAnyMethod
            - ApiSurveysOptionsMethod
            - ApiResultsAnyMethod
            - ApiResultsOptionsMethod
        Properties:
            RestApiId: !Ref SurveysApiGateway
            StageName: "DummyStage"

    SurveysApiStage:
        Type: AWS::ApiGateway::Stage
        DependsOn:
            - SurveysApiGateway
            - ApiGatewayLoggingRoleSetup
        Properties:
            RestApiId: !Ref SurveysApiGateway
            StageName: dev
            DeploymentId: !Ref SurveysApiDeployment
            MethodSettings:
                - DataTraceEnabled: true
                  HttpMethod: "*"
                  LoggingLevel: "ERROR"
                  ResourcePath: "/*"

    ApiResultsOptionsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref SurveysApiGateway
            ResourceId: !Ref ApiResultsResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                          application/json: ""
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysOptionsMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: NONE
            RestApiId: !Ref SurveysApiGateway
            ResourceId: !Ref ApiSurveysResource
            HttpMethod: OPTIONS
            Integration:
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                      ResponseTemplates:
                          application/json: ""
                PassthroughBehavior: WHEN_NO_MATCH
                RequestTemplates:
                    application/json: '{"statusCode": 200}'
                Type: MOCK
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref SurveysApiGateway
            ParentId: !GetAtt SurveysApiGateway.RootResourceId
            PathPart: "surveys"

    ApiResultsResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref SurveysApiGateway
            ParentId: !GetAtt SurveysApiGateway.RootResourceId
            PathPart: "results"

    ApiResultsAnyMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref CognitoAuthorizer
            HttpMethod: "ANY"
            ResourceId: !Ref ApiResultsResource
            RestApiId: !Ref SurveysApiGateway
            Integration:
                Type: "AWS_PROXY"
                IntegrationHttpMethod: "POST"
                Uri:
                    !Join [
                        "",
                        [
                            "arn:aws:apigateway:",
                            !Ref AWS::Region,
                            ":lambda:path/2015-03-31/functions/",
                            !GetAtt LambdaSurveyApi.Arn,
                            "/invocations",
                        ],
                    ]
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    ApiSurveysAnyMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            AuthorizationType: COGNITO_USER_POOLS
            AuthorizerId: !Ref CognitoAuthorizer
            HttpMethod: "ANY"
            ResourceId: !Ref ApiSurveysResource
            RestApiId: !Ref SurveysApiGateway
            Integration:
                Type: "AWS_PROXY"
                IntegrationHttpMethod: "POST"
                Uri:
                    !Join [
                        "",
                        [
                            "arn:aws:apigateway:",
                            !Ref AWS::Region,
                            ":lambda:path/2015-03-31/functions/",
                            !GetAtt LambdaSurveyApi.Arn,
                            "/invocations",
                        ],
                    ]
            MethodResponses:
                - StatusCode: 200
                  ResponseModels:
                      application/json: "Empty"
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Headers: false
                      method.response.header.Access-Control-Allow-Methods: false
                      method.response.header.Access-Control-Allow-Origin: false

    LambdaSurveyApiPermission:
        Type: AWS::Lambda::Permission
        Properties:
            Action: "lambda:invokeFunction"
            FunctionName: !GetAtt LambdaSurveyApi.Arn
            Principal: "apigateway.amazonaws.com"
            SourceArn:
                !Join [
                    "",
                    [
                        "arn:aws:execute-api:",
                        !Ref AWS::Region,
                        ":",
                        !Ref AWS::AccountId,
                        ":",
                        !Ref SurveysApiGateway,
                        "/*",
                    ],
                ]

    SurveysConfigDDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: surveyId
                  AttributeType: S
            KeySchema:
                - AttributeName: surveyId
                  KeyType: HASH
            TableName: !Sub ${AWS::StackName}-surveys-config
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    SurveysResultsDDBTable:
        Type: AWS::DynamoDB::Table
        Properties:
            AttributeDefinitions:
                - AttributeName: contactId
                  AttributeType: S
            KeySchema:
                - AttributeName: contactId
                  KeyType: HASH
            TableName: !Sub ${AWS::StackName}-surveys-results
            ProvisionedThroughput:
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    LambdaSurveysUtilsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    LambdaProcessSurveysFlagsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineConnectPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - connect:StartTaskContact
                            Resource:
                                - !Join [
                                      "/",
                                      [!Ref AmazonConnectInstanceARN, "contact-flow", !Ref ContactFlowIdForTasks],
                                  ]

    LambdaSurveysApiRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                                - dynamodb:DeleteItem
                                - dynamodb:UpdateItem
                                - dynamodb:Scan
                            Resource:
                                - !GetAtt SurveysConfigDDBTable.Arn
                                - !GetAtt SurveysResultsDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysConfigDDBTable.Arn, "index/surveyId"]]
                                - !Join ["/", [!GetAtt SurveysResultsDDBTable.Arn, "index/contactId"]]

    LambdaGetSurveyConfigRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:GetItem
                                - dynamodb:Scan
                            Resource:
                                - !GetAtt SurveysConfigDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysConfigDDBTable.Arn, "index/surveyId"]]

    LambdaWriteSurveyResultsRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service: lambda.amazonaws.com
                      Action: sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            Policies:
                - PolicyName: InlineDDBPolicy
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: Allow
                            Action:
                                - dynamodb:PutItem
                            Resource:
                                - !GetAtt SurveysResultsDDBTable.Arn
                                - !Join ["/", [!GetAtt SurveysResultsDDBTable.Arn, "index/surveyId"]]

    CognitoCustomResource:
        Type: Custom::CognitoCustomResource
        Properties:
            ServiceToken: !GetAtt CognitoCustomResourceLambdaFunction.Arn
            UserPoolId: !Ref UserPool

    CognitoCustomResourceLambdaFunction:
        Type: AWS::Lambda::Function
        Properties:
            Handler: index.handler
            Role: !GetAtt CognitoCustomResourceLambdaFunctionRole.Arn
            Timeout: 15
            Runtime: nodejs22.x
            Code:
                ZipFile: |
                    // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
                    // SPDX-License-Identifier: MIT-0

                    // Import AWS SDK v3 Cognito Identity Provider client
                    const { 
                        CognitoIdentityProviderClient, 
                        AdminUpdateUserAttributesCommand 
                    } = require("@aws-sdk/client-cognito-identity-provider");
                    const https = require("https");
                    const url = require("url");

                    // Initialize Cognito Identity Provider client
                    const client = new CognitoIdentityProviderClient({});

                    /**
                    * Lambda handler for Custom Resource to validate Cognito user
                    * This function is typically called by CloudFormation during stack operations
                    * 
                    * @param {Object} event - CloudFormation Custom Resource event
                    * @param {Object} context - Lambda context object
                    * @returns {Object} Response object with status code and empty body
                    */
                    exports.handler = async (event, context) => {
                        // Handle stack deletion - return success immediately
                        if (event.RequestType === "Delete") {
                            await send(event, context, "SUCCESS");
                            return;
                        }

                        // Prepare input for updating user attributes
                        const input = {
                            UserPoolId: event.ResourceProperties.UserPoolId,
                            Username: "admin",
                            UserAttributes: [
                                {
                                    Name: "email_verified",
                                    Value: "true",
                                },
                            ],
                        };

                        try {
                            // Update admin user attributes to verify email
                            const command = new AdminUpdateUserAttributesCommand(input);
                            await client.send(command);
                        } catch (e) {
                            console.log(e);
                            await send(event, context, "FAILED");
                        }

                        const response = {
                            statusCode: 200,
                            body: JSON.stringify({}),
                        };

                        await send(event, context, "SUCCESS");

                        return response;
                    };

                    /**
                    * Sends response back to CloudFormation
                    * This is required for Custom Resources to signal completion to CloudFormation
                    * 
                    * @param {Object} event - CloudFormation Custom Resource event
                    * @param {Object} context - Lambda context object
                    * @param {string} responseStatus - Status of the operation (SUCCESS/FAILED)
                    * @param {Object} responseData - Additional data to send back to CloudFormation
                    * @param {string} physicalResourceId - Physical ID of the custom resource
                    * @param {boolean} noEcho - Whether to mask the response in CloudFormation logs
                    * @returns {Promise} Promise that resolves when the response is sent
                    */
                    async function send(event, context, responseStatus, responseData, physicalResourceId, noEcho) {
                        // Prepare the response body for CloudFormation
                        var responseBody = JSON.stringify({
                            Status: responseStatus,
                            Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                            PhysicalResourceId: physicalResourceId || context.logStreamName,
                            StackId: event.StackId,
                            RequestId: event.RequestId,
                            LogicalResourceId: event.LogicalResourceId,
                            NoEcho: noEcho || false,
                            Data: responseData,
                        });

                        console.log("Response body:\n", responseBody);

                        // Parse the pre-signed URL provided by CloudFormation
                        var parsedUrl = url.parse(event.ResponseURL);
                        
                        // Prepare the HTTPS request options
                        var options = {
                            hostname: parsedUrl.hostname,
                            port: 443,
                            path: parsedUrl.path,
                            method: "PUT",
                            headers: {
                                "content-type": "",
                                "content-length": responseBody.length,
                            },
                        };

                        // Create a promise to handle the HTTPS request
                        const sendPromise = new Promise((_res, _rej) => {
                            try {
                                // Send the HTTPS request to CloudFormation
                                var request = https.request(options, function (response) {
                                    console.log("Status code: " + response.statusCode);
                                    console.log("Status message: " + response.statusMessage);
                                    context.done();
                                    _res();
                                });

                                // Handle any errors in the HTTPS request
                                request.on("error", function (error) {
                                    console.log("send(..) failed executing https.request(..): " + error);
                                    context.done();
                                    _rej();
                                });

                                // Send the response body
                                request.write(responseBody);
                                request.end();
                            } catch (e) {
                                console.log(e);
                            }
                        });

                        return await sendPromise;
                    }

    CognitoCustomResourceLambdaFunctionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                Version: "2012-10-17"
            Path: "/"
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Effect: Allow
                            Resource: arn:aws:logs:*:*:*
                          - Action:
                                - cognito-idp:AdminUpdateUserAttributes
                            Effect: Allow
                            Resource: !GetAtt UserPool.Arn
                      Version: "2012-10-17"
                  PolicyName: !Sub ${AWS::StackName}-CustomResourceCognito

    S3CustomResource:
        Type: Custom::S3CustomResource
        Properties:
            ServiceToken: !GetAtt CustomResourceS3LambdaFunction.Arn
            SourceBucket: !Ref BlogArtifacts
            DestinationBucket: !Ref FrontEndS3Bucket
        DependsOn: CopyCfnStacksLambdaTrigger

    CustomResourceS3LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourceS3LambdaExecutionRole.Arn
            Timeout: 360
            Runtime: nodejs22.x
            Code:
                ZipFile: |
                    const { S3Client, ListObjectsV2Command, CopyObjectCommand, DeleteObjectCommand } = require("@aws-sdk/client-s3");
                    const response = require('cfn-response');

                    // Initialize S3 client
                    const s3Client = new S3Client();

                    exports.handler = async (event, context) => {
                        const request = event.RequestType;

                        try {
                            switch (request) {
                                case "Create":
                                case "Update":
                                    // Set parameters for listing objects
                                    const listParams = {
                                        Bucket: event.ResourceProperties.SourceBucket,
                                        Prefix: "frontend"
                                    };

                                    console.log("List parameters:", listParams);

                                    // Get bucket contents and copy objects
                                    const objects = await getBucketContent(listParams);
                                    await copyObjects(objects);
                                    console.log("Objects copied successfully");
                                    await response.send(event, context, response.SUCCESS, {});
                                    break;

                                case "Delete":
                                    // Set parameters for deletion
                                    const deleteListParams = {
                                        Bucket: event.ResourceProperties.DestinationBucket,
                                        Prefix: ""
                                    };

                                    // Get bucket contents and delete objects
                                    const objectsToDelete = await getBucketContent(deleteListParams);
                                    await deleteObjects(objectsToDelete);
                                    console.log("Objects deleted successfully");
                                    await response.send(event, context, response.SUCCESS, {});
                                    break;

                                default:
                                    console.log("Unsupported operation.");
                                    await response.send(event, context, response.FAILED, {});
                            }
                        } catch (error) {
                            console.error("Error:", error);
                            await response.send(event, context, response.FAILED, {});
                        }

                        /**
                        * Lists objects in an S3 bucket
                        * @param {Object} params - Parameters for listing objects
                        * @returns {Promise<Object>} List of objects in the bucket
                        */
                        async function getBucketContent(params) {
                            try {
                                const command = new ListObjectsV2Command(params);
                                const response = await s3Client.send(command);
                                console.log("Successfully listed bucket contents");
                                return response;
                            } catch (error) {
                                console.error("Error listing bucket contents:", error);
                                throw error;
                            }
                        }

                        /**
                        * Copies objects from source to destination bucket
                        * @param {Object} data - List of objects to copy
                        * @returns {Promise<boolean>} True if copying succeeds
                        */
                        async function copyObjects(data) {
                            try {
                                for (const item of data.Contents) {
                                    const copyParams = {
                                        Bucket: event.ResourceProperties.DestinationBucket,
                                        CopySource: `${event.ResourceProperties.SourceBucket}/${item.Key}`,
                                        Key: item.Key.replace("frontend/", "")
                                    };

                                    const command = new CopyObjectCommand(copyParams);
                                    await s3Client.send(command);
                                }
                                console.log("Successfully completed copying all objects");
                                return true;
                            } catch (error) {
                                console.error("Error copying objects:", error);
                                throw error;
                            }
                        }

                        /**
                        * Deletes objects from a bucket
                        * @param {Object} data - List of objects to delete
                        * @returns {Promise<boolean>} True if deletion succeeds
                        */
                        async function deleteObjects(data) {
                            try {
                                for (const item of data.Contents) {
                                    const deleteParams = {
                                        Bucket: event.ResourceProperties.DestinationBucket,
                                        Key: item.Key
                                    };

                                    console.log("Deleting object:", deleteParams);
                                    const command = new DeleteObjectCommand(deleteParams);
                                    await s3Client.send(command);
                                }
                                console.log("Successfully completed deleting all objects");
                                return true;
                            } catch (error) {
                                console.error("Error deleting objects:", error);
                                throw error;
                            }
                        }
                    };


    CustomResourceS3LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                Version: "2012-10-17"
            Path: "/"
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Effect: Allow
                            Resource: arn:aws:logs:*:*:*
                      Version: "2012-10-17"
                  PolicyName: !Sub ${AWS::StackName}-CustomResource-CW
                - PolicyDocument:
                      Statement:
                          - Action:
                                - s3:DeleteObject
                                - s3:List*
                                - s3:GetObject
                                - s3:PutObject
                            Effect: Allow
                            Resource:
                                - !Sub
                                  - arn:aws:s3:::${S3BucketName}/*
                                  - S3BucketName: !Ref BlogArtifacts
                                - !Sub
                                  - arn:aws:s3:::${S3BucketName}
                                  - S3BucketName: !Ref BlogArtifacts
                                - !Sub arn:aws:s3:::${FrontEndS3Bucket}/*
                                - !Sub arn:aws:s3:::${FrontEndS3Bucket}
                      Version: "2012-10-17"
                  PolicyName: !Sub ${AWS::StackName}-CustomResourceLambda-S3

    LambdaCustomResource:
        Type: Custom::LambdaCustomResource
        DependsOn:
            - S3CustomResource
        Properties:
            ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
            CognitoPoolId: !Ref UserPool
            CognitoClientId: !Ref UserPoolClient
            ApiEndpoint: !GetAtt CloudFrontDistribution.DomainName
            BucketName: !Ref FrontEndS3Bucket

    CustomResourceLambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Handler: index.handler
            Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
            Timeout: 10
            Runtime: nodejs22.x
            Code:
                ZipFile: |
                    const response = require('cfn-response');
                    const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');

                    // Initialize S3 client
                    const s3Client = new S3Client();

                    exports.handler = async (event, context) => {
                        const request = event.RequestType;

                        try {
                            if (request === "Create" || request === "Update") {
                                // Create the configuration content string
                                const content = `window.app_configuration = { 
                                    cognito_pool_id: "${event.ResourceProperties.CognitoPoolId}",
                                    cognito_client_id: "${event.ResourceProperties.CognitoClientId}", 
                                    api_endpoint: "/dev/surveys" 
                                }`;

                                // Set up parameters for S3 put operation
                                const params = {
                                    Body: content,
                                    Bucket: event.ResourceProperties.BucketName,
                                    Key: "config.js",
                                    ContentType: "application/javascript"
                                };

                                // Upload the configuration file to S3
                                await uploadToS3(params);
                                await response.send(event, context, response.SUCCESS, {});
                            } else {
                                // For Delete requests, simply return success
                                await response.send(event, context, response.SUCCESS, {});
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            await response.send(event, context, response.FAILED, {});
                        }
                    };

                    /**
                    * Uploads content to S3 bucket
                    * @param {Object} params - Parameters for S3 put operation
                    * @returns {Promise} Result of the S3 put operation
                    */
                    async function uploadToS3(params) {
                        try {
                            const command = new PutObjectCommand(params);
                            const result = await s3Client.send(command);
                            console.log('Successfully uploaded config to S3');
                            return result;
                        } catch (error) {
                            console.error('Error uploading to S3:', error);
                            throw error;
                        }
                    }

    CustomResourceLambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                    - Action:
                          - sts:AssumeRole
                      Effect: Allow
                      Principal:
                          Service:
                              - lambda.amazonaws.com
                Version: "2012-10-17"
            Path: "/"
            Policies:
                - PolicyDocument:
                      Statement:
                          - Action:
                                - logs:CreateLogGroup
                                - logs:CreateLogStream
                                - logs:PutLogEvents
                            Effect: Allow
                            Resource: arn:aws:logs:*:*:*
                      Version: "2012-10-17"
                  PolicyName: !Sub ${AWS::StackName}-CRLambda-logs
                - PolicyDocument:
                      Statement:
                          - Action:
                                - s3:PutObject
                            Effect: Allow
                            Resource:
                                - !Join ["/", [!GetAtt FrontEndS3Bucket.Arn, "config.js"]]
                      Version: "2012-10-17"
                  PolicyName: !Sub ${AWS::StackName}-CRLambda-config

    ConnectFunctionPolicyLambdaGetSurveyConfig:
        Type: AWS::Lambda::Permission
        DependsOn: LambdaGetSurveyConfig
        Properties:
            FunctionName: !Ref LambdaGetSurveyConfig
            Action: "lambda:InvokeFunction"
            Principal: "connect.amazonaws.com"
            SourceAccount: !Sub ${AWS::AccountId}
            SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaWriteSurveysResults:
        Type: AWS::Lambda::Permission
        DependsOn: LambdaWriteSurveysResults
        Properties:
            FunctionName: !Ref LambdaWriteSurveysResults
            Action: "lambda:InvokeFunction"
            Principal: "connect.amazonaws.com"
            SourceAccount: !Sub ${AWS::AccountId}
            SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaSurveyUtils:
        Type: AWS::Lambda::Permission
        DependsOn: LambdaSurveyUtils
        Properties:
            FunctionName: !Ref LambdaSurveyUtils
            Action: "lambda:InvokeFunction"
            Principal: "connect.amazonaws.com"
            SourceAccount: !Sub ${AWS::AccountId}
            SourceArn: !Ref AmazonConnectInstanceARN

    ConnectFunctionPolicyLambdaProcessSurveyFlagsConfig:
        Type: AWS::Lambda::Permission
        DependsOn: LambdaProcessSurveyFlagsConfig
        Properties:
            FunctionName: !Ref LambdaProcessSurveyFlagsConfig
            Action: "lambda:InvokeFunction"
            Principal: "connect.amazonaws.com"
            SourceAccount: !Sub ${AWS::AccountId}
            SourceArn: !Ref AmazonConnectInstanceARN

    ContactFlowModule:
        Type: AWS::Connect::ContactFlowModule
        DependsOn:
            - ConnectFunctionPolicyLambdaGetSurveyConfig
            - ConnectFunctionPolicyLambdaWriteSurveysResults
            - ConnectFunctionPolicyLambdaSurveyUtils
            - ConnectFunctionPolicyLambdaProcessSurveyFlagsConfig
        Properties:
            Content: !Sub '{"Version":"2019-10-30","StartAction":"4aa37d68-34fd-4cbf-af84-dd86cd97d758","Metadata":{"entryPointPosition":{"x":14.4,"y":14.4},"ActionMetadata":{"eda22bf3-c3f9-459f-8374-d56f84620644":{"position":{"x":345.6,"y":757.6}},"241f8a68-56ff-49a2-99ee-68625cd82310":{"position":{"x":2364.8,"y":502.4},"parameters":{"Attributes":{"loopCounter":{"useDynamic":true}}},"dynamicParams":["loopCounter"]},"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748":{"position":{"x":632,"y":284.8},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true},"e15e93de-3bae-47a8-ae59-d38b239849ce":{"position":{"x":344,"y":516.8}},"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd":{"position":{"x":304,"y":277.6},"parameters":{"Attributes":{"surveyId":{"useDynamic":true},"intro":{"useDynamic":true},"surveySize":{"useDynamic":true},"outro":{"useDynamic":true}}},"dynamicParams":["surveyId","intro","surveySize","outro"]},"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e":{"position":{"x":62.4,"y":489.6}},"4aa37d68-34fd-4cbf-af84-dd86cd97d758":{"position":{"x":184.8,"y":49.6}},"768119b4-b9c1-4f0d-85b0-3bb77958e1d0":{"position":{"x":58.4,"y":280.8},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaGetSurveyConfig}"},"LambdaInvocationAttributes":{"surveyId":{"useDynamic":true}}},"dynamicMetadata":{"surveyId":true}},"74423203-603a-48f4-b84d-6fdc17e03c1d":{"position":{"x":600,"y":540},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaProcessSurveyFlagsConfig}"},"LambdaInvocationAttributes":{"flag_question_3":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"flag_question_1":{"useDynamic":true}}},"dynamicMetadata":{"flag_question_3":true,"flag_question_2":true,"flag_question_5":true,"flag_question_4":true,"flag_question_1":true}},"48c2e006-db9f-4dab-b5bf-e8e81785fc49":{"position":{"x":888.8,"y":656},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true},"3e6e1542-631c-4dd8-868e-15ae830f0255":{"position":{"x":600.8,"y":764},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaWriteSurveysResults}"}},"dynamicMetadata":{}},"c96fee53-310f-4d1f-8e88-859e2fad8ab5":{"position":{"x":1237.6,"y":844}},"610c4bea-35bb-408e-b61d-f81edfc1ad85":{"position":{"x":1936.8,"y":754.4}},"aa827bc2-ef0e-491a-b4b6-01122dda599d":{"position":{"x":1004.8,"y":280.8},"parameters":{"LoopCount":{"useDynamic":true}},"useDynamic":true},"224cfa54-c321-454b-8911-007386bd9fd3":{"position":{"x":1220,"y":280},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaSurveyUtils}"},"LambdaInvocationAttributes":{"max":{"useDynamic":true},"flag_question_3":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"min":{"useDynamic":true},"currentQuestionIndex":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"flag_question_1":{"useDynamic":true},"question_3":{"useDynamic":true},"question_4":{"useDynamic":true},"question_1":{"useDynamic":true},"question_2":{"useDynamic":true},"question_5":{"useDynamic":true}}},"dynamicMetadata":{"max":true,"flag_question_3":true,"flag_question_2":true,"flag_question_5":true,"min":true,"currentQuestionIndex":true,"flag_question_4":true,"flag_question_1":true,"question_3":true,"question_4":true,"question_1":true,"question_2":true,"operation":false,"question_5":true}},"da0ecb02-b835-4471-af5e-525686b26248":{"position":{"x":1603.2,"y":419.2}},"56177ee5-4215-4449-a3e3-589d6d7add11":{"position":{"x":1450.4,"y":190.4},"parameters":{"Text":{"useDynamic":true}},"useDynamic":true,"conditionMetadata":[],"countryCodePrefix":"+1"},"8c223e1b-d94a-4b9c-acb5-3f400b030105":{"position":{"x":2136.8,"y":512},"parameters":{"Attributes":{"survey_result_$.Attributes.loopCounter":{"useDynamic":true}}},"dynamicParams":["survey_result_$.Attributes.loopCounter"]},"3e442c84-4cf0-412b-ad2c-627b9fde7c39":{"position":{"x":1672.8,"y":188},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaSurveyUtils}"},"LambdaInvocationAttributes":{"max":{"useDynamic":true},"flag_question_3":{"useDynamic":true},"input":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"min":{"useDynamic":true},"currentQuestionIndex":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"newCounter":{"useDynamic":true},"flag_question_1":{"useDynamic":true},"question_3":{"useDynamic":true},"question_4":{"useDynamic":true},"question_1":{"useDynamic":true},"question_2":{"useDynamic":true},"question_5":{"useDynamic":true}}},"dynamicMetadata":{"max":true,"flag_question_3":true,"input":true,"flag_question_2":true,"flag_question_5":true,"min":true,"currentQuestionIndex":true,"flag_question_4":true,"newCounter":true,"flag_question_1":true,"question_3":true,"question_4":true,"question_1":true,"question_2":true,"operation":false,"question_5":true}},"63107da9-ea91-4c3c-b5df-d8303d240363":{"position":{"x":1905.6,"y":188.8},"conditions":[],"conditionMetadata":[{"id":"b4593c13-dc5e-49a0-9257-a33be555ad7d","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"false"}]},"ac06cc31-1f55-48b8-8794-924cff3fa21a":{"position":{"x":1699.2,"y":1107.2}},"f16ab885-87eb-4564-a5f8-9e8fbe8189dd":{"position":{"x":1222.4,"y":553.6},"conditions":[],"conditionMetadata":[{"id":"ed71b790-3fa7-48b8-98d1-08c4aec9dcd9","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"CHAT"}]},"10aa78f0-92c7-425b-8024-3911647de510":{"position":{"x":1692,"y":553.6},"parameters":{"LambdaFunctionARN":{"displayName":"${LambdaSurveyUtils}"},"LambdaInvocationAttributes":{"max":{"useDynamic":true},"flag_question_3":{"useDynamic":true},"input":{"useDynamic":true},"flag_question_2":{"useDynamic":true},"flag_question_5":{"useDynamic":true},"min":{"useDynamic":true},"currentQuestionIndex":{"useDynamic":true},"flag_question_4":{"useDynamic":true},"newCounter":{"useDynamic":true},"flag_question_1":{"useDynamic":true},"question_3":{"useDynamic":true},"question_4":{"useDynamic":true},"question_1":{"useDynamic":true},"question_2":{"useDynamic":true},"question_5":{"useDynamic":true}}},"dynamicMetadata":{"max":true,"flag_question_3":true,"input":true,"flag_question_2":true,"flag_question_5":true,"min":true,"currentQuestionIndex":true,"flag_question_4":true,"newCounter":true,"flag_question_1":true,"question_3":true,"question_4":true,"question_1":true,"question_2":true,"operation":false,"question_5":true}},"b80d83ff-6c6c-4917-a496-1acfb564c556":{"position":{"x":1453.6,"y":553.6},"parameters":{"Text":{"useDynamic":true},"LexV2Bot":{"AliasArn":{"displayName":"template","useLexBotDropdown":true,"lexV2BotName":"${AWS::StackName}-contact-survey-bot"}}},"useLexBotDropdown":true,"lexV2BotName":"${AWS::StackName}-contact-survey-bot","lexV2BotAliasName":"template","useDynamic":true,"conditionMetadata":[{"id":"39efda44-319f-4e8d-8c9d-19745eec79e9","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"0"},{"id":"80534c58-179c-4ee3-972e-f255c209f9c4","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"1"},{"id":"cd70aa8e-9c8b-4f45-b25f-d4896b7e7997","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"2"},{"id":"1efe2907-82dc-42f9-86e4-bf3feba433ca","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"3"},{"id":"61f3b0c8-e6f6-4557-95c1-12c9699153bf","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"4"},{"id":"119bf0d5-3928-4c37-aa00-440dc3ed04f5","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"5"},{"id":"c9f4806b-1a62-4230-90f2-0f27263af2f2","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"6"},{"id":"a951117b-ef0c-48c3-9fa4-6618a697a380","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"7"},{"id":"b887ea5d-7bbb-4da2-b9cc-117f2ff01c47","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"8"},{"id":"570579f3-e48c-4744-abc6-b7c86eba24bc","operator":{"name":"Equals","value":"Equals","shortDisplay":"="},"value":"9"}]},"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e":{"position":{"x":2653.6,"y":782.4}},"54b8b0f4-53b1-493a-9b74-e4056d92400e":{"position":{"x":2132.8,"y":147.2}},"f669287d-527d-41b9-b6e3-ecdbc330755c":{"position":{"x":2353.6,"y":148},"parameters":{"Attributes":{"loopCounter":{"useDynamic":true}}},"dynamicParams":["loopCounter"]}},"Annotations":[],"name":"Contact Survey","description":"","status":"published","hash":{}},"Actions":[{"Parameters":{},"Identifier":"eda22bf3-c3f9-459f-8374-d56f84620644","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"Attributes":{"loopCounter":"$.External.newCounter"}},"Identifier":"241f8a68-56ff-49a2-99ee-68625cd82310","Type":"UpdateContactAttributes","Transitions":{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"$.Attributes.intro"},"Identifier":"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748","Type":"MessageParticipant","Transitions":{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Errors":[{"NextAction":"aa827bc2-ef0e-491a-b4b6-01122dda599d","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"Sorry there was an unexpected error. We apologies for the inconvenience."},"Identifier":"e15e93de-3bae-47a8-ae59-d38b239849ce","Type":"MessageParticipant","Transitions":{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644","Errors":[{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Attributes":{"surveyId":"$.External.surveyId","intro":"$.External.introPrompt","surveySize":"$.External.surveySize","outro":"$.External.outroPrompt","loopCounter":"1"}},"Identifier":"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd","Type":"UpdateContactAttributes","Transitions":{"NextAction":"3bb7ac4c-4ebf-4c6d-ab1f-fbdbdf8a0748","Errors":[{"NextAction":"e15e93de-3bae-47a8-ae59-d38b239849ce","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"Lambda getSurveyConfig error!"},"Identifier":"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e","Type":"MessageParticipant","Transitions":{"NextAction":"eda22bf3-c3f9-459f-8374-d56f84620644"}},{"Parameters":{"FlowLoggingBehavior":"Enabled"},"Identifier":"4aa37d68-34fd-4cbf-af84-dd86cd97d758","Type":"UpdateFlowLoggingBehavior","Transitions":{"NextAction":"768119b4-b9c1-4f0d-85b0-3bb77958e1d0"}},{"Parameters":{"LambdaFunctionARN":"${LambdaGetSurveyConfig.Arn}","InvocationTimeLimitSeconds":"6","LambdaInvocationAttributes":{"surveyId":"$.Attributes.surveyId"}},"Identifier":"768119b4-b9c1-4f0d-85b0-3bb77958e1d0","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"ce7cd3b5-5eec-4d7f-802c-f1e8621baccd","Errors":[{"NextAction":"f1ec1587-371d-4b88-aeb0-cf92c3b10a3e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaProcessSurveyFlagsConfig.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"flag_question_3":"$.External.flag_question_3","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","flag_question_4":"$.External.flag_question_4","flag_question_1":"$.External.flag_question_1"}},"Identifier":"74423203-603a-48f4-b84d-6fdc17e03c1d","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"3e6e1542-631c-4dd8-868e-15ae830f0255","Errors":[{"NextAction":"3e6e1542-631c-4dd8-868e-15ae830f0255","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"$.Attributes.outro"},"Identifier":"48c2e006-db9f-4dab-b5bf-e8e81785fc49","Type":"MessageParticipant","Transitions":{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","Errors":[{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaWriteSurveysResults.Arn}","InvocationTimeLimitSeconds":"5"},"Identifier":"3e6e1542-631c-4dd8-868e-15ae830f0255","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"48c2e006-db9f-4dab-b5bf-e8e81785fc49","Errors":[{"NextAction":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","ErrorType":"NoMatchingError"}]}},{"Parameters":{},"Identifier":"c96fee53-310f-4d1f-8e88-859e2fad8ab5","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{},"Identifier":"610c4bea-35bb-408e-b61d-f81edfc1ad85","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"LoopCount":"$.Attributes.surveySize"},"Identifier":"aa827bc2-ef0e-491a-b4b6-01122dda599d","Type":"Loop","Transitions":{"NextAction":"74423203-603a-48f4-b84d-6fdc17e03c1d","Conditions":[{"NextAction":"224cfa54-c321-454b-8911-007386bd9fd3","Condition":{"Operator":"Equals","Operands":["ContinueLooping"]}},{"NextAction":"74423203-603a-48f4-b84d-6fdc17e03c1d","Condition":{"Operator":"Equals","Operands":["DoneLooping"]}}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaSurveyUtils.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"max":"$.External.max","flag_question_3":"$.External.flag_question_3","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","min":"$.External.min","currentQuestionIndex":"$.Attributes.loopCounter","flag_question_4":"$.External.flag_question_4","flag_question_1":"$.External.flag_question_1","question_3":"$.External.question_3","question_4":"$.External.question_4","question_1":"$.External.question_1","question_2":"$.External.question_2","operation":"getNextSurveyQuestion","question_5":"$.External.question_5"}},"Identifier":"224cfa54-c321-454b-8911-007386bd9fd3","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"f16ab885-87eb-4564-a5f8-9e8fbe8189dd","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{},"Identifier":"da0ecb02-b835-4471-af5e-525686b26248","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"StoreInput":"True","InputTimeLimitSeconds":"5","Text":"$.External.nextQuestion","DTMFConfiguration":{"DisableCancelKey":"False"},"InputValidation":{"CustomValidation":{"MaximumLength":"1"}}},"Identifier":"56177ee5-4215-4449-a3e3-589d6d7add11","Type":"GetParticipantInput","Transitions":{"NextAction":"3e442c84-4cf0-412b-ad2c-627b9fde7c39","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Attributes":{"survey_result_$.Attributes.loopCounter":"$.StoredCustomerInput"}},"Identifier":"8c223e1b-d94a-4b9c-acb5-3f400b030105","Type":"UpdateContactAttributes","Transitions":{"NextAction":"241f8a68-56ff-49a2-99ee-68625cd82310","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaSurveyUtils.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"max":"$.External.max","flag_question_3":"$.External.flag_question_3","input":"$.StoredCustomerInput","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","min":"$.External.min","currentQuestionIndex":"$.External.currentQuestionIndex","flag_question_4":"$.External.flag_question_4","newCounter":"$.External.newCounter","flag_question_1":"$.External.flag_question_1","question_3":"$.External.question_3","question_4":"$.External.question_4","question_1":"$.External.question_1","question_2":"$.External.question_2","operation":"validateInput","question_5":"$.External.question_5"}},"Identifier":"3e442c84-4cf0-412b-ad2c-627b9fde7c39","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"63107da9-ea91-4c3c-b5df-d8303d240363","Errors":[{"NextAction":"da0ecb02-b835-4471-af5e-525686b26248","ErrorType":"NoMatchingError"}]}},{"Parameters":{"ComparisonValue":"$.External.validInput"},"Identifier":"63107da9-ea91-4c3c-b5df-d8303d240363","Type":"Compare","Transitions":{"NextAction":"8c223e1b-d94a-4b9c-acb5-3f400b030105","Conditions":[{"NextAction":"54b8b0f4-53b1-493a-9b74-e4056d92400e","Condition":{"Operator":"Equals","Operands":["false"]}}],"Errors":[{"NextAction":"8c223e1b-d94a-4b9c-acb5-3f400b030105","ErrorType":"NoMatchingCondition"}]}},{"Parameters":{},"Identifier":"ac06cc31-1f55-48b8-8794-924cff3fa21a","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"ComparisonValue":"$.Channel"},"Identifier":"f16ab885-87eb-4564-a5f8-9e8fbe8189dd","Type":"Compare","Transitions":{"NextAction":"56177ee5-4215-4449-a3e3-589d6d7add11","Conditions":[{"NextAction":"b80d83ff-6c6c-4917-a496-1acfb564c556","Condition":{"Operator":"Equals","Operands":["CHAT"]}}],"Errors":[{"NextAction":"56177ee5-4215-4449-a3e3-589d6d7add11","ErrorType":"NoMatchingCondition"}]}},{"Parameters":{"LambdaFunctionARN":"${LambdaSurveyUtils.Arn}","InvocationTimeLimitSeconds":"5","LambdaInvocationAttributes":{"max":"$.External.max","flag_question_3":"$.External.flag_question_3","input":"$.Lex.IntentName","flag_question_2":"$.External.flag_question_2","flag_question_5":"$.External.flag_question_5","min":"$.External.min","currentQuestionIndex":"$.External.currentQuestionIndex","flag_question_4":"$.External.flag_question_4","newCounter":"$.External.newCounter","flag_question_1":"$.External.flag_question_1","question_3":"$.External.question_3","question_4":"$.External.question_4","question_1":"$.External.question_1","question_2":"$.External.question_2","operation":"validateInput","question_5":"$.External.question_5"},"ResponseValidation":{"ResponseType":"STRING_MAP"}},"Identifier":"10aa78f0-92c7-425b-8024-3911647de510","Type":"InvokeLambdaFunction","Transitions":{"NextAction":"63107da9-ea91-4c3c-b5df-d8303d240363","Errors":[{"NextAction":"610c4bea-35bb-408e-b61d-f81edfc1ad85","ErrorType":"NoMatchingError"}]}},{"Parameters":{"Text":"$.External.nextQuestion","LexV2Bot":{"AliasArn":"${GenericLexBotAlias.Arn}"}},"Identifier":"b80d83ff-6c6c-4917-a496-1acfb564c556","Type":"ConnectParticipantWithLexBot","Transitions":{"NextAction":"ac06cc31-1f55-48b8-8794-924cff3fa21a","Conditions":[{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["0"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["1"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["2"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["3"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["4"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["5"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["6"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["7"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["8"]}},{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","Condition":{"Operator":"Equals","Operands":["9"]}}],"Errors":[{"NextAction":"10aa78f0-92c7-425b-8024-3911647de510","ErrorType":"NoMatchingCondition"},{"NextAction":"ac06cc31-1f55-48b8-8794-924cff3fa21a","ErrorType":"NoMatchingError"}]}},{"Parameters":{},"Identifier":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","Type":"DisconnectParticipant","Transitions":{}},{"Parameters":{"Text":"Invalid input."},"Identifier":"54b8b0f4-53b1-493a-9b74-e4056d92400e","Type":"MessageParticipant","Transitions":{"NextAction":"f669287d-527d-41b9-b6e3-ecdbc330755c"}},{"Parameters":{"Attributes":{"loopCounter":"$.External.currentQuestionIndex"}},"Identifier":"f669287d-527d-41b9-b6e3-ecdbc330755c","Type":"UpdateContactAttributes","Transitions":{"NextAction":"f16ab885-87eb-4564-a5f8-9e8fbe8189dd","Errors":[{"NextAction":"178a925b-dc1c-4d84-ab5f-84f50b5e8a2e","ErrorType":"NoMatchingError"}]}}],"Settings":{"InputParameters":[],"OutputParameters":[],"Transitions":[{"DisplayName":"Success","ReferenceName":"Success","Description":""},{"DisplayName":"Error","ReferenceName":"Error","Description":""}]}}'
            InstanceArn: !Ref AmazonConnectInstanceARN
            Name: "Contact Survey"
            State: ACTIVE

    LexIntegrationAssociation:
        Type: AWS::Connect::IntegrationAssociation
        DependsOn: GenericLexBotAlias
        Properties:
            InstanceId: !Ref AmazonConnectInstanceARN
            IntegrationType: LEX_BOT
            IntegrationArn: !GetAtt GenericLexBotAlias.Arn

Outputs:
    WebClient:
        Description: "The frontend access URL"
        Value: !GetAtt CloudFrontDistribution.DomainName
    AdminUser:
        Description: "The initial admin user for the frontend"
        Value: !Ref UserPoolUser
